
import {Polygon} from './polygon';

/** should be long-lat */
export type LatLong = [number, number];

/** for faster searching */
export interface Bounds {
  max: number;
  min: number;
}

/** for faster searching */
export interface AreaBounds {
  x: Bounds;
  y: Bounds;
}

/** 
 * calculated bounds. 
 * FIXME: these could be precalculated
 */
let landmass_bounds: AreaBounds[] = [];

/**
 * cache of landmass "fill" extents at various latitudes. 
 * 
 * we cache shading to avoid recalculating. this should only be calculated 
 * once, unless you change the number of shading steps, but either way it's
 * a big win.
 */
const cache: number[][][] = [];

/**
 * landmass polygons, straight up stolen from
 * https://github.com/jemmybutton/fiziko/blob/master/fiziko.mp#L1317
 * 
 * these are a little unusual: they're [long, lat] (presumably because x, y)
 * and they are 0-180 instead of -90 - +90 (which is actually helpful)
 */
export const landmass: LatLong[][] = [
    [[206, 122.33], [211.07, 116], [213.3, 109.94], [218.57, 106.03], [218.38, 97.36], [220.28, 91.28], [229.75, 78.07], [221.41, 78.29], [220.78, 76.52], [218.07, 74.48], [213.8, 66.08], [213.38, 62.04], [222.31, 77.1], [233.88, 72.27], [237.79, 68.59], [234.88, 64.69], [229.83, 65.57], [228.98, 64.73], [227.37, 59.82], [250.57, 68.12], [254.63, 80.83], [257.07, 80.93], [257.38, 80.52], [258.64, 75.5], [266.4, 68.48], [269.56, 67.49], [271.88, 70.43], [272.67, 74.49], [275.36, 72.94], [276.87, 78.6], [276.68, 79.04], [276.11, 79.28], [276.3, 80.22], [276.75, 79.96], [276.56, 82.38], [277.05, 82.04], [280.5, 86.44], [277.25, 85.56], [276.55, 88.03], [279.47, 92.77], [283.29, 92.25], [282.68, 90.91], [283.74, 90.4], [282.53, 89.58], [283.03, 88.6], [278.44, 80.08], [279.15, 76.64], [281.08, 78.25], [282.29, 80.21], [285.35, 79.72], [288, 77.83], [284.21, 71.22], [287.94, 68.57], [288, 68.6], [288.74, 69.82], [300.09, 61.89], [300.86, 59.94], [299.36, 59.63], [297.64, 55.13], [301.24, 52.55], [296.1, 51.5], [300.45, 49.51], [299.83, 50.75], [299.84, 50.82], [299.44, 51.42], [303.59, 50.57], [302.72, 51.9], [302.96, 52.12], [304.97, 52.87], [304.12, 55.13], [307.89, 53.38], [306.37, 50.11], [308.65, 47.92], [315.01, 45.12], [319.69, 40.31], [320.43, 44.25], [321.66, 44.31], [323.19, 41.66], [320.37, 35.59], [318.47, 37.21], [315.99, 36.32], [313.68, 35.16], [320.43, 31.11], [332.73, 30.38], [338.5, 28.24], [340.91, 28.61], [334.92, 32.27], [335, 39.2], [340.58, 35.32], [341.69, 32.15], [340.43, 31.93], [344.49, 29.68], [352.49, 28.33], [355.9, 25.35], [358.67, 24.01], [366.1, 25.61], [368.78, 23.99], [319.11, 17.34], [309.82, 19], [308.23, 18.4], [307.69, 16.74], [297.49, 16.63], [290.61, 13.26], [285.38, 13.37], [284.06, 12.79], [258.59, 16.61], [260.79, 18.13], [254.13, 18.01], [253.53, 17.04], [252.25, 17.02], [252.44, 18.56], [253.69, 19.64], [251.71, 20.89], [249.66, 16.97], [245.54, 19.39], [236.64, 19.73], [239.08, 21], [237.57, 21.46], [232.4, 21.62], [232.29, 21.34], [225.16, 22.27], [221.46, 21.23], [218.52, 25.09], [216.81, 24.69], [214.76, 24.93], [214.95, 25.52], [213.66, 25.25], [211.67, 23.33], [215.44, 23.49], [217.75, 21.65], [200.52, 19.57], [194.37, 21.1], [186.19, 26.3], [183.33, 30.4], [187.61, 31.42], [191.44, 33.88], [194.61, 33.54], [197.17, 30.74], [196.08, 28.46], [196.04, 27.66], [203.54, 24.58], [203.45, 24.88], [200.38, 27.18], [200.91, 27.54], [200.05, 29.69], [199.62, 29.91], [201.03, 30.25], [207.36, 29.93], [205.2, 31.05], [199.88, 30.97], [199.94, 31.44], [200.26, 32.2], [202.19, 31.76], [202.85, 32.2], [199.62, 32.83], [199.15, 34.61], [189.46, 35.87], [189.93, 35.46], [191.12, 35.08], [190.83, 34.56], [188.1, 33.45], [186.87, 34.75], [187.11, 36.02], [176.39, 40.19], [176.65, 41.24], [173.41, 42.02], [176.82, 43.77], [169.68, 46.56], [169.15, 53.05], [171.1, 53.62], [173.12, 53.39], [178.7, 51.26], [183.17, 46.73], [186.38, 46.75], [192.72, 49.52], [191.46, 52.64], [193.74, 52.83], [196.74, 50.32], [190.71, 44.65], [191.74, 44.4], [198.11, 50.06], [198.89, 52.03], [200.95, 53.75], [202.49, 51.99], [201.15, 49.3], [204.15, 49.28], [206.54, 53.44], [214.39, 53.25], [211.18, 58.75], [198.36, 57.7], [197.88, 59.47], [188.5, 55.87], [189.63, 53.18], [189.49, 52.79], [173.31, 54.75], [168.56, 58.21], [161.34, 69.75], [160.58, 75.18], [161.25, 77.58], [162.08, 79.09], [163.71, 80.23], [165.04, 82.46], [168.88, 84.86], [182.72, 83.77], [184.88, 85.79], [187.22, 85.99], [186.79, 90.34], [190.56, 95.97], [190.23, 105.47], [193.05, 115.74], [196.18, 121.46], [196.92, 124.65], [206, 122.33], [206, 122.33]],
    [[111.44, 45.06], [113.41, 44.75], [111.77, 46], [111.77, 46.07], [118.69, 43.98], [118.13, 42.88], [116.49, 43.6], [114.48, 42.7], [114.1, 43.65], [114.04, 41.9], [113.28, 42.04], [108.57, 42.18], [114.57, 39.81], [120.91, 38.84], [119.04, 41.38], [119.53, 41.59], [122.9, 42.64], [121.94, 42.77], [121.82, 43.31], [124.3, 42.48], [125.29, 42.37], [125.59, 41.84], [125.41, 41.3], [124.75, 41.38], [122.58, 40.38], [122.97, 39.95], [121.71, 40.06], [123.02, 38.38], [121.65, 38.53], [120.78, 35.69], [116.8, 33.48], [114.09, 29.59], [110.59, 31.42], [108.79, 28.81], [104.18, 27.54], [99.54, 29.42], [100.85, 30.15], [100.61, 31.83], [100.51, 34.6], [98.7, 35.56], [99.11, 36.37], [99.33, 38.41], [96.3, 36.78], [85.98, 32.83], [83.79, 29.73], [86.02, 28], [87.63, 26.53], [92.02, 23.6], [94.53, 23.9], [94.57, 23.59], [95.6, 23.75], [96.08, 21.63], [96.05, 20.47], [99.61, 19.73], [103.5, 21.33], [105.9, 22.76], [103.75, 23.87], [104.54, 24.37], [101.78, 25.83], [112.52, 27.74], [113.4, 27.33], [113.39, 27.23], [110.6, 24.25], [110.62, 24.18], [111.27, 23.6], [116.34, 23.81], [117.17, 23.3], [110.5, 21.34], [111.78, 20.87], [110.82, 20.4], [111.3, 20.21], [109.74, 19.84], [110.11, 19.43], [102.09, 17.29], [97.38, 16.64], [92.88, 17.67], [92.21, 18.01], [91.83, 17.28], [89.16, 18.82], [92.76, 20.05], [93.22, 20.96], [92.06, 21.98], [91.69, 22.39], [88.11, 21.59], [87.79, 20.91], [86.11, 20.22], [86.94, 19.77], [84.28, 18.1], [84.81, 17.32], [85.92, 16.37], [82.62, 16.82], [82.26, 18.46], [82.22, 20.63], [80.29, 21.42], [73.81, 21.72], [73.19, 21.56], [73.02, 21.15], [75.97, 21.21], [75.92, 20.34], [77.6, 20.64], [73.05, 17.2], [70.79, 18.11], [67.81, 17.27], [64.31, 17.23], [54.27, 15.93], [52.31, 18.03], [60.06, 17.29], [60.43, 18.73], [59.79, 19.06], [65.44, 20.05], [71.86, 20.7], [72.16, 20.95], [69.43, 21.73], [70.4, 21.96], [70.06, 22.49], [69.48, 22.4], [63.3, 21.97], [48.4, 19.77], [41.64, 20.99], [22.72, 18.59], [11.06, 21.67], [16.58, 23.75], [14.57, 23.75], [10.29, 24.54], [17.36, 25.3], [17.42, 26.18], [12.61, 29.54], [15.96, 29.89], [15.52, 31.43], [20.94, 31.31], [13.31, 35.43], [16.05, 35.66], [19.1, 35.11], [18.12, 34.75], [27.83, 28.87], [28.89, 30.18], [33.87, 29.92], [33.36, 30.35], [38.31, 30.44], [42.27, 33.16], [42.87, 32.94], [47.84, 35.37], [50.85, 39.13], [53.79, 42.3], [54.39, 50.26], [64.16, 61.59], [63.13, 61.47], [62.78, 61.95], [64.93, 63.33], [66.24, 65.62], [67.78, 65.49], [65.67, 61.75], [65.09, 58.99], [66.42, 61.44], [68.81, 63.42], [72.94, 69.36], [81.5, 74.4], [83.61, 73.92], [85.99, 75.53], [90.7, 76.75], [93.55, 80.26], [95.61, 82.43], [96.7, 82.3], [98.47, 82.54], [101.05, 86.23], [98.22, 93.14], [100.55, 101.04], [102.97, 105.27], [107.45, 108.16], [104.04, 132.27], [104.08, 133.7], [103.49, 134.62], [102.5, 136.82], [104.04, 136.98], [103.44, 141.15], [104.17, 143.63], [108.08, 144.9], [110.27, 145.35], [111.35, 145.04], [113.34, 144.63], [109.31, 140.79], [112.69, 137.21], [111.47, 135.36], [113.17, 133.67], [113.34, 130.92], [116.56, 129.1], [119.97, 124.37], [128.41, 119.87], [133.19, 114.17], [136.37, 113.08], [138.56, 109.76], [141.63, 100.78], [139.94, 93.61], [133.56, 91.17], [129.89, 90.92], [128.12, 89.29], [123.75, 83.93], [119.97, 83.01], [117.24, 81.38], [117.85, 80.79], [116.9, 80.06], [117.65, 79.02], [114.24, 79.23], [110.12, 78.93], [108.35, 77.69], [102.27, 80.15], [102.6, 80.45], [101.42, 81.66], [96.3, 80.94], [95.6, 75.16], [91.88, 73.8], [89.69, 73.89], [91.19, 69.61], [91.08, 68.3], [87.73, 69.96], [81.32, 69.32], [81.63, 61.96], [88.41, 60.66], [88.78, 61.23], [92.41, 60.31], [95.93, 65.23], [96.7, 65.47], [97.12, 65.14], [97.12, 59.81], [100.34, 56.62], [103.22, 54.85], [104.21, 50.99], [106.28, 48.84], [108.51, 48.83], [108.23, 48.05], [111.68, 45.41]],
    [[309.58, 101.89], [307.85, 104.82], [304.23, 104.36], [301.98, 106.89], [301.81, 107.2], [301.39, 106.32], [297.9, 109.91], [292.61, 112.27], [292.42, 116.24], [291.76, 116.34], [293.22, 123.3], [295.54, 125.57], [300.79, 123.84], [313.31, 124.74], [314.35, 125.13], [314.72, 125.92], [316.53, 125.74], [318.45, 127.71], [324.06, 128.78], [326.88, 127.94], [328.82, 125.64], [331.64, 120.19], [331.26, 115.24], [328.34, 111.83], [327.46, 109.78], [327.32, 109.75], [323.91, 106.24], [320.57, 100.41], [318.09, 106.52], [315.29, 105.19], [314.65, 104.27], [314.4, 103.64], [314.38, 101.88], [314.02, 100.8], [310.93, 100.72], [310, 101.21], [309.58, 101.89]],
    [[360, 173.94], [347.31, 173.02], [337.83, 170.31], [340.03, 168.66], [345.63, 168.61], [346.01, 167.92], [341.09, 166.89], [341.61, 165.5], [343.88, 164.64], [343.24, 163.51], [349.37, 161.91], [322.58, 157.73], [323.11, 157.14], [263.4, 156.39], [263.26, 156.59], [263.82, 157.03], [245.18, 163.09], [245.85, 157.68], [234.93, 156.8], [226.52, 156.65], [194.69, 160.02], [194.23, 160.12], [182.27, 160.22], [175.88, 161.21], [175.09, 160.92], [174.87, 161.24], [171.99, 160.65], [165.8, 161.33], [163.91, 162.6], [161.68, 163.73], [141.54, 169.39], [118.58, 172.13], [116.78, 171.69], [102.46, 169.67], [94.78, 168.49], [97.74, 167.88], [101.28, 166.75], [117.86, 164.33], [118.52, 163.02], [117.24, 161.46], [117.41, 160.81], [114.93, 158.64], [113.38, 158.53], [113.67, 158.17], [112.94, 157.45], [115.93, 156.83], [115.81, 156.34], [116.18, 155.88], [116.84, 155.67], [119.7, 154.63], [119.77, 154.11], [121.16, 153.99], [121.76, 153.53], [116.74, 154], [113.84, 154.79], [110.65, 157.28], [111.18, 157.79], [111.19, 159.12], [104.73, 163.13], [104.3, 163], [90.27, 162.69], [86.46, 162.59], [74.77, 162.74], [78.14, 164.63], [64.48, 164.84], [65.31, 164.46], [50.04, 164.22], [50.29, 164.61], [32.44, 165.76], [29.52, 166.6], [27.21, 166.74], [27.17, 166.97], [22.41, 166.97], [23.06, 168.33], [21.43, 168.63], [29.78, 169.97], [27.58, 170.36], [29.1, 170.81], [23.15, 171.94], [24.93, 172.46], [17.69, 173.06], [13.37, 172.69], [3.71, 172.63], [13.68, 173.98], [0, 174.21]],
    [[124.62, 19.08], [123.98, 19.56], [126.36, 20.09], [127.24, 20.59], [124.98, 23.19], [130.77, 29.28], [135.8, 28.99], [137.84, 25.04], [141.86, 24.34], [146.13, 22.18], [157, 19.51], [155.91, 17.98], [155.55, 16.8], [159.25, 15.48], [158.44, 14.93], [159.9, 14.05], [157.97, 12.46], [159.52, 10.77], [159.19, 10.3], [167.06, 8.42], [159.95, 8.2], [156.76, 8.73], [153.02, 7.87], [131.44, 7.07], [130.82, 7.37], [127.12, 7.44], [116.94, 8.32], [111.03, 9.65], [105.32, 11.75], [107.03, 12.86], [108.98, 13.43], [112.23, 14.12], [119.83, 14.46], [121.54, 15.67], [120.54, 15.91], [122.91, 16.69], [121.82, 17.23], [124.62, 19.08]],
    [[307.49, 56.47], [307.06, 57.11], [308.22, 57.5], [310.39, 56.79], [310.75, 57.43], [312.59, 56.96], [313.38, 56.17], [316.84, 55.24], [317.14, 55.51], [319.46, 54.34], [320.21, 51.88], [320.32, 48.77], [319.72, 48.29], [319.35, 47.51], [322.01, 46.93], [323.56, 45.58], [319.79, 44.82], [319.05, 44.6], [318.2, 46.06], [317.67, 48.01], [318.7, 48.63], [315.73, 52.34], [311.83, 54.71], [307.49, 56.47]],
    [[172.44, 33.8], [171.76, 34.44], [174.73, 35.22], [173.52, 37.33], [172.83, 38.17], [172.56, 39.98], [179.32, 38.52], [178.63, 37.06], [175.74, 33.85], [176.19, 30.59], [172.04, 32.2], [171.52, 33.36], [172.44, 33.8]],
    [[222.04, 111.1], [224.53, 115.35], [228.6, 106.45], [226.81, 103.35], [222.04, 111.1]]
  ];

/**
 * essentially get the bounding rect, in the slowest possible way
 */
const CalculateLandmassBounds = () => {
  return landmass.map((area) => {
    const bounds = {
      x: {
        max: area[0][0],
        min: area[0][0],
      },
      y: {
        max: area[1][0],
        min: area[1][0],
      }
    }
    for (const point of area) {
      bounds.x.max = Math.max(bounds.x.max, point[0]);
      bounds.x.min = Math.min(bounds.x.min, point[0]);
      bounds.y.max = Math.max(bounds.y.max, point[1]);
      bounds.y.min = Math.min(bounds.y.min, point[1]);
    }

    bounds.x.min = Math.round(bounds.x.min);
    bounds.x.max = Math.round(bounds.x.max);

    bounds.y.min = Math.round(bounds.y.min);
    bounds.y.max = Math.round(bounds.y.max);

    return bounds;
  });
}


/**
 * calculate the shading at this latitude. result is set of longitude pairs 
 * (start, end) that should be shaded at the given latitude. we're doing 
 * integer precision in both directions.
 */
const CalculateLandmassShading = (latitude: number) => {

  latitude = Math.round(latitude);

  if (!landmass_bounds.length) {
    landmass_bounds = CalculateLandmassBounds();
  }

  const points: number[][] = [];
  let state = false;
  let start = -1;

  // thought I was being really clever here by caching the current
  // landmass polygon, but it's only like 10% faster

  // bounds check is much better, like 50% improvement

  let index = 0;

  for (let x = 0; x < 365; x++) {

    // if we are on land, we know which landmass we're on and the only
    // thing we need to check is if we're still on land

    if (state) {
      
      if (landmass_bounds[index].x.max >= x && Polygon.PointInsidePolygon(landmass[index], [x, latitude])) {
        continue;
      }
      state = false;

      // we're storing this as radians

      points.push([start * Math.PI / 180, (x - 1) * Math.PI / 180]);

    }

    // otherwise we need to check all of them (FIXME: could bounds check?)

    else {
      for (let i = 0; i < landmass.length; i++) {
        if ( landmass_bounds[i].x.max >= x 
             && landmass_bounds[i].x.min <= x
             && landmass_bounds[i].y.min <= latitude
             && landmass_bounds[i].y.max >= latitude
             && Polygon.PointInsidePolygon(landmass[i], [x, latitude])) {
          state = true;
          start = x;
          index = i;
          break;
        }
      }
    }

  }

  return points;
}


/**
 * get the shading at the given latitude, populating the cache.
 */
export const GetLandmassShading = (latitude: number) => {

  let cached = cache[latitude];
  if (cached) { return cached; }

  cached = CalculateLandmassShading(latitude);
  cache[latitude] = cached;

  return cached;

}


